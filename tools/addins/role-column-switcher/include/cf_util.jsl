Names Default To Here(1);


utility_modal_window = function({title, text, text_icon = "BlankIndex", window_icon = "NewApplication"}, {Default Local},
	/*""" Show simple modal window to user
	
	Partially inspired by @Craige_Hales https://community.jmp.com/t5/Uncharted/Modal-Dialogs/ba-p/436177
	
	Args:
		title (string): Title of the modal window
		text (string): Text to display to user
		text_icon (string): Icon displayed next to text
		window_icon (string): Window icon
	
	Returns:
		num: 1 if user pressed OK and 0 if user pressed cancel / cross
	"""*/
	
	nw = New Window(title, <<modal, << return result, << show toolbars(0), << show menu(0), << Set Window Icon(window_icon),
		H List Box(
			Panel Box("Message",
				H List Box(
					Icon Box(text_icon), 
					Spacer Box(size(10, 1)), 
					V Center Box(Text Box(text, << Set Wrap(300)))
				)
			),
			Spacer Box(Size(10, 0)),
			Panel Box("Actions",
				Lineup Box(N Col(1),
					Button Box("OK"),
					Button Box("Cancel")
				)
			)
		)
	);
	return(nw["Button"]);
);


get_current_report_dt = function({helpkey = "Graph Builder"}, {Default Local},
// Currently only works for Graph Builder
	If(Is Empty(Current Report()),
		Throw("No open reports found");
	);
	
	cur_report = Current Report() << XPath(Eval Insert("//OutlineBox[@helpKey='¤helpkey¤']", "¤"));
	If(N Items(cur_report) < 1,
		Throw("No graph builder open");
	,
		cur_report = cur_report[1] << Get Scriptable Object;
	);
	cur_dt = cur_report << Get Data Table;
	
	return(Eval List({cur_report, cur_dt}));
);


get_roles = function({report}, {Default Local},
	all_variables = report << get variables;
	roles = Associative Array();
	For Each({variable, idx}, all_variables,
		cur_role = variable["Role"];
		colnames = Arg(variable, 1) << get name;
		roles[cur_role] = Associative Array();
		roles[cur_role]["idx"] = idx;
		roles[cur_role]["columns"] = colnames;
	);
	
	return(roles);
);


find_role_columns = Function({gb, role = "Color"}, {Default Local},
	vars = gb << Get Variables();
	colname = "";
	role_idx = 0;
	For Each({var, idx}, vars,
		role = var["Role"];
		If(role == "Color",
			colname = Arg(variable, 1) << get name;
			role_idx = idx;
			break();
		);
	);
	return(Eval List({colname, role_idx}));
);

replace_role_column = function({gb, new_col, role = "Color"}, {Default Local},
	{colname, role_idx} = find_role_column(gb, role);
	gb << inval;
	If(role_idx > 0,
		gb << Remove Variable(role_idx);
	);
	Eval(EvalExpr(
		gb << Add Variable({Expr(NameExpr(AsColumn(new_col))), Role(Expr(role))});
	));
	wait(0);
	gb << update window;
	return(1);
);
